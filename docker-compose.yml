services:
  # The Database Service for storing persistent data
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=kudospoints_user
      - POSTGRES_PASSWORD=kudospoints_password
      - POSTGRES_DB=kudospoints_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  # The Message Broker for asynchronous communication
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq
    # Note: Uses default guest/guest credentials for local development set by the maintainers as default in the image
    ports:
      - "5672:5672"   # AMQP protocol (application connections)
      - "15672:15672" # Web-based management UI
    # We shall use "Anonymous volume" as losing messages on a local dev restart isn't critical

  # The Core Points Service Application
  points-service:
    build:
      context: ../points-service # Go up one dir, then into 'points-service'
    container_name: points-service
    ports:
      - "8080:8080"
    environment:
      # overrides datasource URL in app.props to connect to postgres service on Docker network
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/kudospoints_db
    depends_on:
      - postgres

  # The Rewards Logic Service Application
  rewards-service:
    build:
      context: ../rewards-service
    container_name: rewards-service
    ports:
      # changing the later(container) port to 8081 since we mentioned in app.prop that our
      # server to run on port 8081 to not get conflicts with 8080 which points-service is using!
      - "8081:8081"
    environment:
      # Connect to other containers using their service names
      # can also be points.service.base-url=...
      - POINTS_SERVICE_BASE-URL=http://points-service:8080
      - SPRING_RABBITMQ_HOST=rabbitmq
    depends_on:
      - rabbitmq
      - points-service

volumes:
  # "Named volume" to persist postgres database data
  postgres-data: {}
